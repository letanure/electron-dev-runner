name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Run semantic-release
        id: semantic
        run: pnpm semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build:
    needs: release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build Electron app
        run: |
          pnpm run build
          # Ensure electron is only in devDependencies (remove from dependencies if it exists)
          npm pkg delete dependencies.electron
          # Run electron-builder directly
          npx electron-builder --publish=never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_NOTARIZATION: true

      - name: List built files
        shell: bash
        run: |
          echo "=== Contents of release directory ==="
          ls -la release/ 2>/dev/null || echo "No release directory found"
          echo "=== All installer files ==="
          find . -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.zip" 2>/dev/null || echo "No installer files found"

      - name: Get version from package.json
        id: version
        shell: bash
        run: echo "version=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload release assets (macOS)
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: release/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload release assets (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: release/*Setup*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload release assets (Linux)
        if: runner.os == 'Linux'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: release/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}